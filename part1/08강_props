Component에 데이터 전해주려면 props


0:00 컴포넌트간 데이터 전송은 props  

5:12 /cart 페이지에 props 써보자 

8:10 props 응용 




원래 하나의 컴포넌트는 다른 컴포넌트에 있는 변수를 사용할 수 없습니다. 

하지만 각 컴포넌트가 부모 자식관계인 경우 props 문법을 사용하면 이용가능합니다. 

오늘 강의를 한 줄 요약하자면 props는 그냥 함수 파라미터 문법이라고 이해하면 끝인데

그런거 모르는 사람도 있으니 같이 알아봅시다. 




장바구니 데이터를 DB에서 가져오자


변수 하나 만들어서 DB에서 유저의 장바구니 데이터를 가져왔다고 칩시다. 

이걸 html에 보여주고 싶은데 어떻게 하죠?


export default function Cart() {
  let 장바구니 = ['Tomatoes', 'Pasta']
  return (
    <div>
      <h4>Cart</h4>
      <CartItem/>
      <CartItem/>
    </div>
  )
}

function CartItem(){
  return(
    <div className="cart-item">
      <p>{장바구니[0]}</p>
      <p>$40</p>
      <p>1개</p>
    </div>
  )
}  

장바구니 변수에 들어있던 내용을 넣고 싶어서 {장바구니[0]} 이렇게 써봤는데 에러가 나는군요. 

왜냐면 장바구니 변수는 상단에 만든 function에 있지 하단 function에는 정의되지 않았기 때문에 에러가 나는 것일 뿐입니다. 

이 경우 변수 가져다쓰는 법을 알아봅시다. 






컴포넌트의 부모/자식관계


잘 보면 Cart / CartItem 이렇게 2개의 컴포넌트가 있고

Cart 컴포넌트 안에서 CartItem 컴포넌트를 사용하고 있습니다.

이 경우 Cart는 부모, CartItem은 자식 컴포넌트라고 부릅니다. 





▲ 그냥 다른 컴포넌트를 품고있으면 부모라고 부르고

품어진 놈은 자식이라고 관습적으로 부릅니다. 






▲ 부모/자식 관계를 왜 알려줬냐면

부모에 있던 변수, 함수들은 자식이 사용하고 싶으면 

props 문법으로 전송해줄 수 있는데 그거 배우려구요 








props 문법으로 부모 -> 자식 데이터 전송하려면 


2개의 step이 있습니다. 

1. 자식컴포넌트 사용하는 곳에 가서 <자식컴포넌트 작명={전해줄데이터} /> 

2. 자식컴포넌트 정의부분으로 가서 props라는 파라미터 등록 후 props.작명 사용

이러면 부모가 자식에게 변수나 데이터를 전송해줄 수 있습니다. 


하지만 이론만 설명하면 이해가 되지 않으니 예시를 보아야합니다.

부모인 Cart에 있던 변수를 자식인 CartItem에게 전송해봅시다. 




export default function Cart() {
  let 장바구니 = ['Tomatoes', 'Pasta']
  return (
    <div>
      <h4>Cart</h4>
      <CartItem 상품={장바구니[0]}/>
      <CartItem 상품={장바구니[1]}/>
    </div>
  )
}

function CartItem(props){
  return(
    <div className="cart-item">
      <p>{props.상품}</p>
      <p>$40</p>
      <p>1개</p>
    </div>
  )
}  

1. 자식컴포넌트 사용하는 곳에 가서 <자식컴포넌트 작명={전해줄데이터} /> 

2. 자식컴포넌트 만드는 곳에 가서 props라는 파라미터 등록 후 props.작명 사용하면 됩니다.

props 전송문법은 중요하니 외워두도록 합시다. 


(참고1) props는 <CartItem 이런거={이런거}  저런거={저런거}> 이렇게 많이 전송가능

(참고2) 일반 문자데이터 전송하려면 중괄호 없이 <CartItem 어쩌구="어쩌구"> 해도 됩니다.









▲ 참고로 자식 -> 부모 패륜방향 전송은 불가능합니다.




▲ 옆집 컴포넌트로의 불륜전송도 불가능합니다. 

항상 부모 -> 자식 이렇게만 전송할 수 있기 때문에

많은 컴포넌트에서 필요한 변수들은 필요한 컴포넌트 중 가장 부모인 컴포넌트에 저장해두는게 좋습니다. 



Q. 자식컴포넌트에서 직접 DB 데이터 가져오면 편하지 않나?

- 자식컴포넌트 안에서 "DB에서 데이터꺼내주세요" 라고 코드짜면 되긴 합니다.

근데 <자식컴포넌트>를 3번 쓰고 있는데 그럼 DB에서 데이터꺼내는 문법이 3번이나 동작할듯요


(예외) 나중가면 fetch()를 이용해서 DB데이터 가져오는 문법을 사용할텐데 

server component들에서 fetch()는 중복으로 많이 써도 상관없습니다. 

deduplication 기능 덕분인데 나중에 알아봅시다. 







props는 실은 함수 파라미터 문법이랑 똑같음


함수에 파라미터같은거 왜 넣죠?

자바스크립트 기초강의에서는 

"function 하나로 다양한 기능을 사용하기 위해서 쓰는게 파라미터 문법" 이랬습니다.

props도 실은 파라미터랑 똑같은 문법입니다. 

그래서 이런 식으로 응용도 가능한데 


function Banner(){
  return (
    <h5>현대카드 결제 행사중</h5>
  )
} 

지금 "현대카드 결제 행사중"이라는 글자를 컴포넌트로 만들어서 <Banner/> 이렇게 사용중이라고 칩시다.

근데 가끔

"삼성카드 결제 행사중"

"롯데카드 결제 행사중"

이라는 글자가 필요하면 어쩌죠? 


가장 쉬운 방법은

function Banner2() {}

function Banner3() {}

....

이렇게 컴포넌트를 또 만들어서 각각 다른 글자를 저장해두고 사용하면 됩니다.

하지만 function 문법특징인데

비슷한 내용을 가지고 있는 function들은 굳이 여러개 만들 필요가 없습니다. 




function Banner(props){
  return (
    <h5>{props.content} 결제 행사중</h5>
  )
} 

컴포넌트 만들 때 props.content 이런 식으로 구멍을 뚫어놓으면 이제 컴포넌트 사용할 때

<Banner content="삼성카드" /> 이러면 "삼성카드 결제 행사중" 이 나옵니다. 

<Banner content="롯데카드" /> 이러면 "롯데카드 결제 행사중" 이 나옵니다. 


그래서 살짝씩 다른 디자인, 다른 내용의 컴포넌트가 필요할 때는

컴포넌트 여러개 만들 필요없이 props 문법을 잘 사용하면 됩니다. 

props는 다른 말로 function 문법에서 쓰는 파라미터라고 생각하면 되겠습니다.


결론은 자바스크립트 잘해야 리액트, Next.js도 잘함 





오늘의 숙제 : 

Q1. 빨간색 버튼 하나를 컴포넌트로 만들어봅시다.

function Btn(){
  return <button style={{ background : 'red' }}>버튼임</button>
}