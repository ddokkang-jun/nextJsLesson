상세페이지 만들기 2 (useRouter)


0:00 저번시간 숙제

2:27 useRouter 

6:24 prefetch 기능

8:30 현재 URL이 궁금하면




저번시간 숙제


/list 페이지에 있는 글제목 누르면

해당 /detail 페이지로 이동할 수 있게 링크를 만들어오랬는데 

링크 만들려면 <Link> 컴포넌트 쓰면 된다고 했습니다. 



(/list/page.js)

import { connectDB } from "@/util/database.js"
import Link from "next/link";

export default async function List() {
  let db = await connectDB).db('forum')
  let result = await db.collection('post').find().toArray()
  return (
    <div className="list-bg">
      {
        result.map((a, i)=>
          <div className="list-item">
            <Link href={'/detail/' + result[i]._id}><h4>{a.title}</h4></Link>
            <p>1월 1일</p>
          </div>
        )
      }
    </div>
  )
}

<Link> 컴포넌트를 import해와서 추가해봤습니다. 

result[i]._id라고 쓰면 아마 그 자리에 글의 _id가 나올텐데 

제목누르면 '/detail' + result[i]._id 로 이동시켜봤습니다. 





useRouter


실은 오늘 배울게 하나 더 있는데

<Link>말고 다른 방법으로 페이지 이동을 시킬 수도 있습니다. 

useRouter() 쓰면 자바스크립트 코드로 페이지이동을 시켜줄 수 있습니다. 

다만 use어쩌구 문법들은 client component 안에만 쓸 수 있으니 client component 하나만 만들어서 테스트해보거나 합시다. 



'use client'

import {useRouter} from 'next/navigation'

export default function DetailLink(){
  let router = useRouter()
  return (
    <button onClick={()=>{ router.push('/') }}>버튼</button>
  )
}

router.push('/어쩌구') 실행하면 /어쩌구 경로로 페이지이동이 가능합니다.




<button onClick={()=>{ router.back() }}>버튼</button> 
router.back() 실행하면 뒤로가기해줍니다. 




<button onClick={()=>{ router.forward() }}>버튼</button> 
router.forward() 실행하면 앞으로가기해줍니다. 




<button onClick={()=>{ router.refresh() }}>버튼</button> 
router.refresh() 실행하면 새로고침해줍니다.

근데 페이지를 처음부터 다시 로드하는게 아니라

이전과 바뀐점을 분석해서 바뀐부분만 새로고침해준다고 합니다. 

Next.js 공식문서에선 soft refresh라고 부릅니다. 






prefetch 기능 


<button onClick={()=>{ router.prefetch('/어쩌구') }}>버튼</button> 
router.prefetch('/어쩌구') 실행하면 '/어쩌구'의 내용을 미리 로드해줍니다. 

그럼 그 페이지 방문할 때 매우 빠르게 방문할 수 있습니다. 

빠른 사이트를 만들고 싶을 때 쓸 수 있는 유용한 기능입니다. 




<Link href={'/어쩌구'}>링크</Link> 
다행히 server component에서도 저런 기능을 사용할 수 있는데

<Link href={'/어쩌구'}> 쓰면 <Link>태그가 화면에 보이는 순간

'/어쩌구' 페이지를 자동으로 미리 로드해줍니다. 




<Link href={'/어쩌구'} prefetch={false}>링크</Link> 
자동으로 미리 로드하는게 싫으면 prefetch 속성을 false로 바꿔줍시다. 

링크가 많은 게시판의 경우 모든 링크를 다 읽을게 아닌데 굳이 모든걸 미리 로드하는건 자원낭비입니다. 






현재 URL이 궁금하면


client component에서 현재 URL에 뭐가 적혀있는지 궁금하면 


'use client'

import {usePathname, useSearchParams, useParams} from 'next/navigation'

export default function DetailLink(){
  let a = usePathname()
  let b = useSearchParams()
  let c = useParams()
  console.log(a)
}

usePathname() 쓰면 현재 URL 출력해주고 

useSearchParams() 쓰면 search parameter (query string) 출력해주고

useParams() 쓰면 [dynamic route]에 입력한내용 (URL 파라미터) 을 출력해줍니다. 

자주 안쓸거같은 것들은 외워봤자 까먹으니 필요할 때 검색해서 씁시다. 