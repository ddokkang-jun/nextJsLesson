수정기능 만들기 2






오늘의 최종코드


(Edit컴포넌트)
- 서버는 id를 모르기 때문에

-Edit컴포넌트에서 

-result를 출력해서 데이터의 모양이 어떻게 생겼는지 알아낸 다음

<input name="_id" defaultValue={result._id.toString()}/>

result._id.toString()로 id를 서버에 알려줘야함



(edit 서버)
- console.log(요청.body) 

- updateOne({수정하고 싶은 데이터의 정보},{데이터를 어뜨케 할지 선택})

- $inc: 1
- 이전의 값에서 1만큼 증가시켜줌

- result 에는 데이터베이스에서 바뀐 결과가 저장됨.




import { ObjectId } from "mongodb";
import { connectDB } from "../../../util/database";

export default async function handler(요청, 응답) {
	let updateData = { title: 요청.body.title, content: 요청.body.content };
	let db = (await connectDB).db("forum");
	let result = await db
		.collection("post")
		.updateOne({ _id: new ObjectId(요청.body._id) }, { $set: updateData });

	return 응답.redirect(302, "/list");
}









0:00 심심해서 Navbar 만들어봄 

0:46 수정페이지에서 버튼누르면 서버로 요청 

2:39 DB 수정은 updateOne

9:33 updateOne 추가사항 




저번시간 숙제로 내드린 기능을 완성해봅시다.

답안 따라쳐봤자 손가락만 아플 뿐이고

혼자 몇시간 부여잡고 검색하고 삽질해봐야 실력이 늡니다. 

실제 코딩도 검색하고 삽질하면서 하지 않습니까 




심심해서 Navbar 만들어봄



<div className="navbar"> 
  <Link href="/" className="logo">Appleforum</Link> 
  <Link href="/list">List</Link> 
</div>  

layout.js에 이런거 추가했고 


.navbar {
  background: white;
  padding: 20px;
}
.navbar a {
  margin-right: 10px;
  text-decoration: none;
  color: black;
}
.logo {
  font-weight: bold;
} 

globals.css에 이런거 추가해서 상단바도 만들어봤습니다. 




수정기능 완성해오라던 저번시간 숙제를 해보자면 

전송버튼 누르면 DB에 있던 document를 작성내용으로 수정하면 된다고 했는데 

근데 유저가 DB 데이터를 직접 수정하면 큰일나니 서버에 수정을 부탁하는 식으로 코드짭시다. 

그럼 서버 기능부터 만들면 되겠군요. 




서버기능 만들기



서버에 DB수정하는 기능 만들고 

유저가 버튼누르면 그걸 실행하라고 부탁하는 식으로 코드짜면 됩니다.




<div className="write">
  <form action="/api/post/edit" method="POST">
    <input name="title" defaultValue={result.title}/>
    <input name="content" defaultValue={result.content}/>
    <button type="submit">전송</button>
  </form>
</div> 

action 속성에 이렇게 적으면 /api/post/edit.js 파일 안에 있는 코드가 실행되니까

그 파일 만들어서 기능만들면 되겠군요.

그래서 서버기능 만들러 api 폴더로 이동해봅시다. 





import { connectDB } from "@/util/database"
import { ObjectId } from "mongodb";

export default async function handler(요청, 응답) {
  if (요청.method == 'POST'){
    console.log(요청.body)
    let db = (await connectDB).db('forum')
    let result = await db.collection('post').updateOne({게시물정보}, { $set : {바꿀데이터}} );
    응답.redirect(302, '/list')
  }
}

pages/api/post/edit.js 파일 만들고 이렇게 코드를 짰습니다. 

유저가 폼으로 보낸 데이터는 요청.body 출력하면 있으니까 거기서 

바꿀데이터와 게시물정보도 꺼내서 저기에 잘 채워넣으면 될 것 같은데 

하지만 요청.body 출력해보면 유저로부터 전달되는 데이터가 {title : 어쩌구, body : 어쩌구} 밖에 없습니다.

바꿀데이터는 있는데 게시물정보는 없는데유 




<div className="write">
  <form action="/api/post/edit" method="POST">
    <input name="title" defaultValue={result.title}/>
    <input name="content" defaultValue={result.content}/>
    <input name="_id" defaultValue={result._id.toString()}/>
    <button type="submit">전송</button>
  </form>
</div> 

그럼 유저에게 보내라고 하면 되는거 아니겠습니까. 

서버에서 코드짜다가 데이터같은게 없으면 유저에게 보내라고 하거나 DB에서 꺼내보면 됩니다. 

수정페이지에 <input>을 하나 더 만들고 _id를 집어넣어둡니다. 

그럼 서버로 _id 이름으로 ObjectId('어쩌구') 에서 '어쩌구' 내용부분만 전달됩니다.



Q. 왜 .toString() 쓰냐고요?

서버와 데이터 주고받을 때 문자, 숫자, JSON 이런 것만 주고받을 수 있습니다. 

저런 이상한 데이터들은 문자로 치환하는 방법을 찾아서 쓰면 되겠습니다. 



Q. _id 같은건 유저에게 안보여주는게 좋지않나요?

넴 display : none 같은 스타일 줘서 숨기면 됩니다. 





import { connectDB } from "@/util/database.js"
import { ObjectId } from "mongodb";

export default async function handler(요청, 응답) {
  if (요청.method == 'POST'){

    let 바꿀거 = {title : 요청.body.title, content : 요청.body.content}
    let db = (await connectDB).db('forum')
    let result = await db.collection('post').updateOne(
      {_id : new ObjectId(요청.body._id)}, 
      { $set : 바꿀거} 
    );
    console.log(result)

    응답.redirect(302, '/list')
  }
}

1. 요청.body에서 이것저것 꺼내서 바꿀데이터를 만들어서 updateOne() 안에 집어넣었습니다. 

2. 요청.body._id 꺼내서 게시물정보를 만들어서 updateOne() 안에 집어넣었습니다. 

{ } 자료같은게 어렵고 어색하면 자바스크립트 기초강의 들을 시점입니다. 





(참고) 실은 GET, POST 말고도 PUT, DELETE 요청으로 서버와 통신할 수도 있습니다.

PUT은 수정, DELETE는 삭제할 때 쓰면 좋은데 서버 api들 끼리 이쁘게 구분하기 위함이고 필수는 아닙니다. 

단점은 <form>으로 데이터 전송시 PUT, DELETE는 사용할 수 없어서 굳이 쓰고 싶으면 외부 라이브러리 설치하거나 해야합니다.

그래서 코드가 너무 길거나 그런게 아니면 <form>으로 데이터 전송시엔 일단 POST 요청 쓰는게 낫습니다. 




오늘의 결론은 

- document 수정하려면 updateOne 쓰면 됩니다. 값 변경말고 증가/감소도 가능함 

- 서버에서 코드짜다가 필요한 데이터가 없으면 1. 유저에게 보내라고 하거나 2. DB에서 꺼내써도 됩니다. 