11 분
글 작성기능 만들기 2





이번시간엔 저번시간에 만들다가 만 것을 계속 이어나갈건데.

주요기능

1. 사용자가 input에 글을 적고 발행버튼을 누르면 

2. 서버에서 작성된 글을 검사하고 이상없으면 데이터베이스에 저장을 하도록 함

3. 동시에 게시판으로 페이지 이동하도록 해줌

(global.css)

.p-20 {
  padding: 20px;
}
input {
  box-sizing: border-box;
  padding: 10px;
  display: block;
  margin-bottom: 10px;
}
button {
  padding: 10px 15px;
  background: lightgray;
  border: none;
  border-radius: 5px;
} 

(write.js)


export default function Write() {
	return (
		<div className="p-20">
			<form action="/api/post/new" method="POST">
				<input name="title" placeholder="글제목" />
				<input name="content" placeholder="글내용" />
				<button type="submit">전송</button>
			</form>
		</div>
	);
}

와 같이 코드를 수정하자.


- pages/api/post/new.js 경로로 파일을 만들고



(new.js)

import { connectDB } from "../../../util/database";

export default async function handler(요청, 응답) {
	if (요청.method == "POST") {
		if (요청.body.title == "" || 요청.body.content == "") {
			return 응답.status(500).json("글을 입력해라");
		}

		try {
			let db = (await connectDB).db("forum");
			let result = db.collection("post").insertOne(요청.body);
			return 응답.redirect(302, "/list");
		} catch (error) {
			console.log(error);
		}
	}
}











0:00 글작성페이지 만들기 

2:04 서버기능 만들기 

7:45 예외처리하는 것도 중요 

10:20 오늘의 결론 



유저 글작성 기능을 한글로 정리부터 해보면

1. 글 작성하는 페이지 레이아웃 만들어놓고

2. 그 페이지에서 전송버튼 누르면 서버로 글 전송

3. 서버에는 유저에게 데이터 받으면 확인 후에 DB에 저장하는 기능 만들어두기

이렇게 적었습니다. 이제 코드로 옮기면 될듯요 

뭔가 모르는 점들이 나올텐데 모르는건 검색해봐야지 생각한다고 나오지 않습니다. 





전송버튼누르면 서버로 글 전송


유저에게 인풋을 받아서 서버로 보내고 싶으면 <form>태그

입력박스를 하나 만들고 싶으면 <input>태그

전송버튼을 만들고 싶으면 <button type="submit"> 태그를 이용합니다. 

이런거 활용해서 레이아웃 만들어보면 됩니다. 



export default async function Write() {
  return (
    <div className="p-20">
      <form action="/api/post/new" method="POST">
        <input name="title" placeholder="글제목"/>
        <input name="content" placeholder="글내용"/>
        <button type="submit">전송</button>
      </form>
    </div>
  )
} 

/write/page.js 파일에 이렇게 작성했습니다. 

<form>태그에 action, method 속성에 각각 URL, method 적으면

그 URL과 method로 만들어놓은 서버기능에 <input>에 적힌 내용들을 전달해줍니다. 



.p-20 {
  padding: 20px;
}
input {
  box-sizing: border-box;
  padding: 10px;
  display: block;
  margin-bottom: 10px;
}
button {
  padding: 10px 15px;
  background: lightgray;
  border: none;
  border-radius: 5px;
} 

global.css에 css도 넣어봄






서버에서 <form>으로 전송한 데이터 받는 법


(/api/post/new.js)

export default function handler(){
  if (요청.method == 'POST') {
    console.log(요청.body)
  }
}

<form>에서 /api/post/new로 POST요청을 하고 있기 때문에

/api/post/new.js 파일 만들어서 코드짜면 요청수신이 가능합니다. 


폼 데이터 받는 법은 쉬운데  

서버기능안에서 요청.body 출력해보시면 유저가 폼으로 전송한 데이터가 들어있습니다. 

진짜로 글 적어서 전송해보면 { title : 어쩌구, content : 어쩌구 }가 출력됩니다. 






MongoDB에 데이터 저장하는 법


await db.collection('컬렉션이름').insertOne(저장할object자료) 
이 코드가 실행되면 object자료를 컬렉션에 저장해줍니다. 


이제 모르는건 다 배웠으니

글작성기능은 알아서 완성해옵시다. 

답보지마쇼






예외처리도 중요



지금은 무슨 글을 보내든 의심없이 DB에 저장해주고 있습니다.

하지만 유저가 제목에 아무것도 안적고 글 보내면 어쩌죠? 

그런 경우 DB 글저장을 하기 싫다면 if문을 적극 활용하면 됩니다. 


import { connectDB } from "@/util/database"

export default async function handler(요청, 응답) {
  if (요청.method == 'POST'){
    if (요청.body.title == '') {
      return 응답.status(500).json('제목써라')
    }
    let db = (await connectDB).db('forum')
    let result = db.collection('post').insertOne(요청.body);
    응답.redirect(302, '/list')
  }
} 

유저가 빈 칸을 보내면 { title : '' } 이런 식으로 나오기 때문에

if문을 저렇게 써봤다고 합니다. 



이거 말고도 제목이 너무 길거나 

내용을 안써놨거나

여러가지 악성유저들의 활동상황을 가정해보고 전부 막아놓으면 훌륭한 서버기능이 완성됩니다. 



Q. 유저가 보내기 전에 프론트엔드에서 빈칸 체크하면 되는거 아님?

프론트엔드에 있는 모든건 위조가 가능해서 서버에서도 해야합니다. 





import { connectDB } from "@/util/database"

export default async function handler(요청, 응답) {
  if (요청.method == 'POST'){
    if (요청.body.title == '') {
      return 응답.status(500).json('제목써라')
    }
    try {
      let db = (await connectDB).db('forum')
      let result = db.collection('post').insertOne(요청.body)
      응답.redirect(302, '/list')
    } catch (error) {
      DB에러시 실행할코드~~
    }
    
  }
} 

DB가 다운되거나 인터넷이 뭔가 끊기거나 그런 경우 DB에서 에러가 발생할 수 있습니다.

그런 경우도 체크하고 싶으면 try, catch를 사용합시다.

try, catch 문법은 try { } 안에 있던 코드가 에러나면 catch { } 안에 있는 코드를 대신 실행해줍니다.









오늘의 숙제 :

Q. 연습삼아서 회원가입기능을 만들어옵시다. 

- 유저가 회원가입페이지에서 아이디, 비번을 입력하고 전송버튼 누르면 그 데이터를 DB의 컬렉션에 보관해두면 그게 회원가입기능 아니겠습니까.

- 물론 비번은 암호화해서 저장하는게 좋지만 지금은 무시하고 기능만 만들어봅시다. 

- 이미 존재하는 아이디로는 가입할 수 없게 막아야합니다.


잘되면 부끄러우니 컬렉션과 서버기능 지웁시다. 