Next.js에서 MongoDB 사용하기




0:00 DB에 데이터 하나만 저장해보자

2:58 Next.js에서 MongoDB 사용하려면

6:24 DB연결코드는 database.js 파일 만들어서 보관하는게 나음 

9:37 MongoDB collection의 모든 document 꺼내오려면 




DB에 데이터 하나만 저장해보자


호스팅받은 mongodb.com에 접속해봅시다.

거기서 collections 라는 버튼이 어딘가 있을텐데 들어가보면 DB에 있는 데이터 조회가 가능합니다.






▲ 지금 아무것도 없으니까 Add my own data 버튼 눌러서 데이터 몇개만 입력해봅시다. 






▲ forum이라는 이름의 database와 post라는 이름의 collection도 하나 만들어봅시다. 

database부터 하나 만들고 그 안에 collection을 만들고 그 안에 document를 넣을 수 있게 되어있습니다. 



좀 쉽게 비유하자면

document는 하나의 프로젝트

collection은 폴더

document는 하나의 메모장 파일입니다. 

실제 데이터는 document에 { } 형식으로 기록하면 됩니다. 






▲ insert document 버튼이 있을텐데 그거 누르면 document 하나 발행이 가능합니다. 

글제목과 글내용 저장하고 싶어서 사진처럼 document를 하나 만들어봤습니다.

(_id 부분은 안채워도 자동생성됩니다)

이 멋진 데이터를 Next.js로 만든 페이지에서 보여주면 좋을 것 같으니

DB에서 데이터 뽑아서 보여주는 방법을 지금부터 알아봅시다. 







Next.js 환경에서 MongoDB 연결하기


1. 터미널열어서 mongodb 라이브러리를 설치합니다. 


npm install mongodb

작업폴더에서 터미널 새로 열어서 이거 입력하면 설치됩니다.

MongoDB 접속이랑 입출력 편하게 도와주는 라이브러리임 



const client = await MongoClient.connect('DB접속URL~~', { useNewUrlParser: true })
const db = client.db("forum")
db.collection().어쩌구~ 

설치했으면 이제 이렇게 코드를 적으면 DB에 데이터 입출력이 가능한데

위의 2줄은 입출력마다 매번 실행할 필요없이 1회만 실행하면 됩니다. 

그래서 위의 2줄의 코드를 함수로 싸매서 재사용해보도록 합시다. 

긴 코드 짧은 단어로 축약하고 싶을 때 함수쓴다고 배우지 않았습니까 




2. 아무데나 js 파일을 하나 만들어서

- 저는 프로젝트 폴더에 util폴더 만들고 그 안에 database.js 만들어서 적어봤습니다. 

import { MongoClient } from 'mongodb'
const url = 'DB접속URL~~'
const options = { useNewUrlParser: true }
let connectDB

if (process.env.NODE_ENV === 'development') {
  if (!global._mongo) {
    global._mongo = new MongoClient(url, options).connect()
  }
  connectDB = global._mongo
} else {
  connectDB = new MongoClient(url, options).connect()
}
export { connectDB }




이렇게 적어둡시다.

- DB접속URL은 방금 mongodb.com에서 복사해온거 입력합시다. 

어짜피 셋팅하는 코드들은 다시 건드리지 않을 코드기 때문에 복붙해서 써도 전혀 상관없습니다. 


코드 대충설명하면



3. DB 입출력이 필요한 곳에서 connectDB 함수를 가져다씁시다. 


import { connectDB } from "/util/database.js"

export default async function Home() {
  let client = await connectDB;
  db = client.db('forum');
  let result = await db.collection('post').find().toArray();

  return (
    <main>
      {result[0].title}
    </main>
  )
}

- await connectDB 결과를 db라는 변수 만들어서 거기 저장해둡시다. 

db.collection().find() 어쩌구 하면 특정 collection에 있던 모든 document 출력이 가능합니다. 

- await 어쩌구 쓰려면 await이 들어있는 function 왼쪽에 async를 붙여줘야 사용가능합니다. 




export default async function Home() {
  let db = (await connectDB).db('forum');
  let result = await db.collection('post').find().toArray();
  (생략)

3줄이나 쓰는게 귀찮으면 축약해도 됩니다.





Q. let db 변수를 database.js에 적어두고 export {db} 해서 쓰면 매번 저렇게 길게 안써도 될듯요?

await connectDB 처럼 await 붙는 것들은 export해서 쓰면 이상해질 수 있습니다. 

현재는 실험단계인 top-level await 기능을 추가하거나 하면 해볼 수 있습니다. 

next.config.js 파일열어서



실은 MongoDB말고 다른 데이터베이스 사용해도 방법은 비슷합니다.

- DB 조작도와주는 라이브러리 설치하고 

- DB 연결하는 코드 셋팅해놓고 

- 라이브러리 사용법 대로 DB 입출력하는 코드 사용하면 됩니다. 


(참고) DB입출력하는 코드는 server component 안에서만 사용합시다. 

client component 안에 적은 코드는 유저들도 쉽게 볼 수 있기 때문에 그렇습니다. 