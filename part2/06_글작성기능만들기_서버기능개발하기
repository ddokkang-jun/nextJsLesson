글 작성기능 만들기 1 (서버기능 개발은)






사용자 <=> server <=> DB



프로젝트 최상단 그러니까 "제일 바깥에 pages폴더"만들자. pages다 page 아니다. "오타 조심"

pages폴더 < api폴더 < test.js 만들자.

- 자동으로 생성되는 api폴더에서 작업을 진행하며 만들경우 안될경우가 아직 많기때문

pages폴더를 만들면 터미널에서 서버를 껏다가 킨다.

test.js파일에서 다음과 같이 작성한다.

export default function handler(){
  console.log(123);
}

이렇게 한다음 

localhost:3000/api/test

이렇게 주소를 입력하게 되면 자동으로 GET요청을 한다. 터미널에 123 이 출력되면 테스트 성공이다.

그런데 test.js파일에서 응답을 안해줬기 때문에 localhost:3000/api/test 에서 무한으로 응답받기를 대기하는 상태가 되어버린다.

이를 해결하기 위해 응답처리 코드를 작성한다.

export default function handler(요청, 응답){
  console.log(123);
  return 응답.status(200).json('처리완료함')
}

return은 안적어도 됨.



서버기능이 성공적으로 실행되었으면 status() 안에 200 넣으면 되고 

서버기능 실행이 실패했으면 500을 넣으면 됩니다. 

유저가 요청을 잘못해서 유저탓으로 실패한 경우 400을 넣으면 됩니다. 


- 요청자에게 데이터도 보내주고 싶으면 응답.json() 안에 데이터 넣으면 됩니다.

object, array, 문자, 숫자 아무거나 전송가능 




이번엔 post요청을 배워보자

app폴더안에 < write폴더를 만들고 < page.js 를 만들자.

(app/write/page.js)

export default function Write(){
  return (
    <div>
      <h4>글작성</h4>
      <form action="/api/test" method="POST">
        <button type="submit">버튼</button>
      </form>
    </div>
  )
}

(pages/api/test.js)

export default function handler(요청, 응답) {
  if (요청.method == 'GET'){
    응답.status(200).json({ name: '안녕' })
  }
  if (요청.method == 'POST'){
    응답.status(200).json({ name: '바보' })
  }
}



여기까지 수업끝임







0:00 글작성기능 한글로 정리부터

1:50 서버기능 어떻게 만드냐면

3:27 Next.js 에서 서버기능 만드는 법 

8:26 유저가 POST 요청하는 법

10:03 저는 method마다 다른 코드 실행하고 싶은데요 



오늘의 숙제 : 

하단 참고



오늘은 유저가 글을 작성할 수 있는 기능을 만들어봅시다. 

1. 글 작성할 수 있는 페이지 만들고 

2. 작성한 글을 DB로 보내서 저장시키면 되겠군요. 

하지만 문제가 있습니다. 유저가 이상한 데이터 집어넣으면 어쩔 것입니까 







서버가 필요하다 


유저가 입력한 것들을 DB로 바로 저장시켜버리면 큰 문제가 발생할 수 있습니다. 

유저가 이상한 데이터를 DB에 넣을 수도 있으니까요. 

실은 그 반대도 위험합니다.

유저가 DB에서 직접 데이터를 출력할 수 있게 만들면 민감한 정보들도 전부 출력해버리면 어쩔 것입니까. 


그래서 유저가 DB 입출력이 필요할 때는 DB 입출력을 안전하게 대리로 해줄 수 있는 프로그램을 하나 만들어두고

유저들은 그 프로그램에 DB 입출력해달라고 부탁만 하는 식으로 코드짜놓는게 좋습니다. 






그림으로 그리면 이렇게 됩니다. 

입출력 대리로 해주는 프로그램을 '서버'라고 부릅니다. 




그래서 글작성기능을 

1. 글 작성할 수 있는 페이지 만들고 

2. 전송버튼누르면 서버에 글저장해달라고 부탁하고 

3. 서버는 부탁받으면 검사해보고 DB에 저장하면 됩니다. 






서버 만드는 법 



그래서 서버는 유저 요청을 받으면 이것저것 실행하면 되는 매우 간단한 프로그램이라

서버 만드는 법도 별거 아닙니다. 

"누가 이런 요청을 하면 이런 코드 실행해주셈" 이렇게 코드짜놓으면 끝임 



예를 들어서 DB에 글저장하는 기능을 만들고 싶으면

"누가 글제목과 내용을 보내면 DB에 저장해주세요" 라고 코드짜놓으면 끝입니다. 



근데 서버개발 하다보면 비슷하게 생긴 기능들이 많을 수 있기 때문에 

혼동을 피하기 위해서 기능마다 URL과 method이름을 붙여서 구분합니다. 







- URL은 개발자 맘대로 작성하면 됩니다. /어쩌구 /저쩌구 맘대로 기입가능합니다. 

- method는 GET POST PUT DELETE 4개 중에 맘대로 골라서 작성하면 됩니다. 

보통 데이터 출력을 다루는 기능엔 GET,

새로운 데이터 입력은 POST

수정은 PUT

삭제는 DELETE 

를 많이 선택합니다. 



그래서 여러분이 짤 서버코드는 "누가 글제목과 내용을 보내면 DB에 저장해주세요" 인데

거기에 URL과 method까지 작성해주면 개발 끝입니다. 

서버에 만들어놓은 기능을 전문용어로 API라고 부르기도 합니다. 








Next.js에서 서버기능 만들려면


1. pages 폴더안에 api 폴더를 만들고 거기에 js 파일을 아무이름으로 만들어줍니다.

예를 들어 저는 pages/api/test.js를 만들어봤습니다. 

ages/api/ 폴더 안에 만든 파일과 폴더는 자동으로 서버기능의 URL이 됩니다. 

그래서 이제 유저가 /api/test 라는 URL로 GET/POST/PUT/DELETE 요청하면 test.js 안에 있는 코드가 실행됩니다.





export default function handler(요청, 응답) {
  console.log(123)
}

2. 정확히말하면 test.js 파일에 함수하나 넣으면

/api/test로 GET/POST/PUT/DELETE 요청시 그 함수안에 있는 코드가 실행됩니다.




진짠지 테스트하고 싶으면 직접 /api/test로 GET 요청날려보면 되는데

실은 웹브라우저 주소창에 URL 적으면 거기로 GET 요청을 날려주기 때문에

브라우저 주소창에 /api/test 입력해서 진짜 터미널에 123 출력되나 확인해봅시다. 




3. 서버는 요청을 받았으면 응답도 해주는게 좋습니다.

왜냐면 언제나 읽씹은 나쁜 것이기 때문에

서버에서 코드실행이 끝났으면 응답도 해주도록 합시다.  

안하면 요청자는 무한으로 대기중인 상태에 빠질 수 있습니다. 



export default function handler(요청, 응답) {
  응답.status(200).json('처리완료함')
}

- 서버기능이 성공적으로 실행되었으면 status() 안에 200 넣으면 되고 

서버기능 실행이 실패했으면 500을 넣으면 됩니다. 

유저가 요청을 잘못해서 유저탓으로 실패한 경우 400을 넣으면 됩니다. 


- 요청자에게 데이터도 보내주고 싶으면 응답.json() 안에 데이터 넣으면 됩니다.

object, array, 문자, 숫자 아무거나 전송가능 


진짜 응답해주나 GET요청 다시 해봅시다. 






서버로 POST 요청하려면



<form>태그 쓰면 유저들이 서버로 POST, GET요청을 쉽게 날릴 수 있습니다. 

그러기 위해서 app/write/page.js 파일 하나 만들어봅시다. 



(app/write/page.js)

export default function Write(){
  return (
    <div>
      <h4>글작성</h4>
      <form action="/api/test" method="POST">
        <button type="submit">버튼</button>
      </form>
    </div>
  )
}

그리고 위와같이 <form>을 작성해봅시다. 

action에는 URL 잘 기입하고 method에는 GET, POST 중에 하나 기입하면 됩니다. (PUT, DELETE는 못씁니다)

그럼 전송버튼 눌렀을 때 서버로 요청이 갑니다. 

눌러서 테스트해봅시다. 







export default function handler(요청, 응답) {
  if (요청.method == 'GET'){
    응답.status(200).json({ name: '안녕' })
  }
  if (요청.method == 'POST'){
    응답.status(200).json({ name: '바보' })
  }
}

(참고1) 서버에서 method 종류마다 각각 다른 기능을 실행하고 싶으면 if문으로 구분하면 됩니다. 

(참고2) 서버측에서 실행되는 코드들이기 때문에 DB 입출력하는 코드를 여기 작성해도 아무상관없습니다. 





오늘의 숙제 : 


1. 유저에게 DB에 있던 게시물들을 뽑아서 보내주는 서버기능을 하나 만들어보고 진짜 되나 브라우저 GET요청해서 테스트해봅시다. 




▲ 사진처럼 /api/list 로 GET요청하면 DB에 있던 글들이 모두 등장해야합니다. 


답보면 AI에게 대체당함



2. 유저에게 현재 날짜, 현재 시간을 보내주는 서버기능을 만들어보고 진짜 되나 브라우저로 테스트해봅시다. 

- 날짜시간 출력하는 법을 모르면 검색해봐야지 생각한다고 나오지는 않습니다. 

- URL과 method는 개발자 맘대로 설정가능합니다. 


알아서 해봅시다


3. 오늘 만들려고 했던 글발행 기능을 완성해옵시다.

(힌트1) 한글로 기능 설명부터 하고 그대로 코드로 번역합시다. 유저가 서버로 글 보내면 그거 DB에 저장시키면 끝 아닙니까

(힌트2) <form>태그 안에 <input name="title"> 이런거 넣어두면 글 입력할 수 있고 폼전송시 함께 서버로 전송됩니다. 

서버에선 요청.body 라고 출력해보면 <input> 에 입력한 글 출력가능  