댓글기능 만들기 1 (input 데이터 다루기)




0:00 댓글은 client-side rendering 해보자

2:44 <input>에 입력한 값 다루기 

4:35 버튼누르면 서버로 댓글전송

5:35 댓글을 DB 어디에 어떻게 저장할 것임 




list페이지에서 아무 글을 클릭하면 지금은

detail페이지로 들어가는 구조이다.

그래서 상세페이지에 댓글을 작성할 수 있는 기능을 만들어보자 

댓글 조회기능과 댓글 발행기능 만들어놓으면 끝인데

이전에 배웠던 기술은 form 태그를 사용해서 

댓글 전송 버튼을 누르면 댓글을 서버와 데이터 베이스에 저장했다



TMI :

form 태그를 쓰면 전송버튼을 눌렀을때 "새로고침"이 일어남

그래서 이번 강의에서는 댓글을 추가 할때 마다 새로고침이 일어나지 않게 하기위해 다른 방법을 쓰는 이유도 있음.


근데 이 방식은 이전에 배운 server-side rendering이고 이 방법은 지겨우니

이번엔 새로운 패턴인 "client-side rendering"을 해보도록 합시다. 



client-side rendering 하면 브라우저에서 html 생성, 수정, 삭제를 해줄 수 있기 때문에

부드럽고 이쁜 사이트를 만들 수 있지만 검색노출은 잘 안될 수 있습니다.

근데 댓글이라 검색노출 잘 안되어도 상관없을듯요 



그럼 댓글 발행기능부터 만들어볼건데 

1. 유저가 댓글쓰고 전송버튼누르면

2. 서버로보내서 DB에 댓글을 저장하기

그냥 이거 코드로 옮기면 끝이겠군요. 






댓글 UI 만들기


자바스크립트를 써서 html을 생성 수정 삭제하고 싶으니까

댓글넣을 부분은 client component로 만들어봅시다. 


디테일 페이지에 가서

(src/app/detail/[id]/page.js)

import { ObjectId } from "mongodb";
import { connectDB } from "../../../../util/database";

export default async function Detail(props) {
	let db = (await connectDB).db("forum");
	let result = await db
		.collection("post")
		.findOne({ _id: new ObjectId(props.params.id) });

	return (
		<div>
			<h4>상세페이지임</h4>
			<h4>{result.title}</h4>
			<p>{result.content}</p>
      여기다가 Comment.js 컴포넌트 만들자
		</div>
	);
}



Comment.js 컴포넌트 만들자. page.js 와 같은 위치에 만들자

(src/app/detail/[id]/Comment.js)


'use client'

export default function Comment(props) {
  return (
    <div>
      <div>댓글목록</div>
      <input />
      <button>댓글전송</button>
    </div>
  )
} 



(/detail/[id]/page.js)

import Comment from './Comment.js'

export default async function Detail(props) {
  return (
    <div>
      (생략)
      <Comment/>
    </div>
  )
} 

상세페이지 옆에 <Comment/>라는 컴포넌트를 만들어서 상세페이지에 집어넣어봤습니다. 

이제 전송버튼누르면 서버로 댓글작성한걸 보내고 DB에 저장해보면 끝인데

그 전에 리액트에서 <input> 에 입력한 값 다루는 법을 알아봅시다. 






input에 적은 내용 가져오기



리액트에서 <input>안에 입력한 값을 사용하고 싶으면  <form> 쓰면 되는데

이걸 사용할 경우 새로고침되는게 싫고 ajax로 보내고 싶으면

보통 state에 넣어두고 사용합니다.




(Comment.js)

'use client'
import {useState} from 'react'

export default function Comment(props) {
  let [comment, setComment] = useState('')
  return (
      <div>
        <div>댓글목록</div>
        <input onChange={(e)=>{ e.target.value }} />
        <button>댓글전송</button>
      </div>
  )
} 

client component에서 유저가 <input>에 적은 내용 가져오려면 

1. onChange라는 이벤트핸들러 안에서 e.target.value 라고 쓰면 유저가 입력한 값이 들어있습니다.

2. 그걸 보통 state에 저장해두고 사용합니다. 그래서 state 만들고 거기 e.target.value 넣었음



"onChange" 안의 코드는 "input에 뭐 입력할 때 마다 실행되기 때문에" 

"이제 입력할 때 마다 입력한 값이 state에 저장됩니다." 






이번엔 버튼누르면 서버로 댓글전송해보자 

- 버튼을 누르면 comment를 서버로 fetch, method : post 하면 될듯


export default function Comment(props) {
  let [comment, setComment] = useState('')
  return (
      <div>
        <div>댓글목록</div>
        <input onChange={(e)=>{ e.target.value }} />
        <button onClick={()=>{ fetch('/URL', { method : 'POST', body : comment } ) }}>댓글전송</button>
      </div>
  )
} 

이제 POST요청 받으면 DB에 댓글 저장해주는 서버기능 만들면 끝입니다.

근데 댓글을 DB 어디에 어떻게 저장할 것임?

대충 저장하면 나중에 고생할 수 있으니 잘 생각해봅시다. 






DB 어디에 저장하냐면




▲ 당연히 글 document 안에 이렇게 댓글들을 저장하면 됩니다.

(document 안에 넣을 게 많으면 array 도 집어넣을 수 있습니다)

근데 문제점은 댓글이 1억개 달리면 어쩔 것입니까 그런 것도 생각해봅시다. 


- MongoDB document 하나는 최대 8MB의 데이터를 저장할 수 있고

- array 안의 데이터들이 너무 많으면 거기서 원하는 것만 찾아서 수정, 삭제가 어려울 수 있습니다. 

이런 이유 때문에 document 하나에 많은거 몰아넣으면 document 터져 죽음





▲ 그래서 이것처럼 collection 따로 만들어서 댓글하나를 document로 저장해놓는 것도 좋습니다. 

근데 이런 정보만 넣으면 어디 달린 댓글인지 모르니까 ... 



결론적으로 "댓글 하나당 document 하나씩 독립적으로 만들어서 저장하는게 좋다" 

document1 = 댓글 1, document2 = 댓글 2, ...... 요런식으로 해라. 독립적으로 해.




▲ 원래 어떤 글에 달린 댓글인지 표기하기 위해

부모 글의 _id 같은 것도 기록해두면 좋겠군요.



-id: ObjectId('6aewttcsfa3231asqe123zzczxc1')
content:"댓글2"
author:"admin@codingapple.com"
parent:"ObjectId(부모게시물의 _id)"



mongodb는 ObjectId 기반으로 document 찾기 매우 잘함


Q. DB에 뭔가 저장할 때 이렇게 해도 될지 모르겠어요

- 나중에 데이터가 많아져도 저장, 수정, 삭제, 출력이 잘 되면 잘 저장한 것입니다. 

- 테스트를 해봤을 때 잘되면? 잘한거임

데이터가 많아졌을 때 수정, 삭제, 출력이 어려울 것 같으면 다른 document로 빼보십시오. 





오늘의 숙제 :

댓글 전송버튼 누르면 DB에 댓글이 저장되는 기능을 만들어봅시다.

저장시 comment라는 이름의 collection에 저장하는게 어떨까요. 


참고로 오늘의 숙제는 다음 강의에서 같이 풀어본다.