글목록 조회기능 만들기 (DB 데이터 출력)


0:00 프로그램 알아서 만드는 법

0:52 세부기능 알아서 만드는 법

2:13 글목록조회기능 1. html 페이지만들기

4:15 글목록조회기능 2. DB데이터 가져오기

6:07 글목록조회기능 3. html에 꽂기



오늘의 숙제 : 

하단 참고




게시판을 만들기로 했는데 게시판은 어떻게 만듭니까? 

뭐 만들라고 하면 "배운 적이 없는데 어떻게 만들어요" 부터 내뱉는 겁쟁이들이 있는데 

원래 개발자는 안배운거 + 안해본거 만드는 사람들입니다. 



첨보는 프로그램 알아서 만드는 법


처음보는 프로그램을 만들고 싶을 때는 모든 기능을 자세히 정리해두고 하나씩 쉬운거 부터 개발해나가면 됩니다. 


게시판은 여러 기능이 있습니다. 

- 글목록 조회기능

- 상세페이지 

- 글발행기능 

- 수정삭제기능

이런 기능이 필요합니다. 

가장 중요한 글목록 조회기능부터 만들어봅시다.






세부기능 알아서 만드는 법


위에서 적어놓은 세부 기능 하나를 만들 때는

1. 그 기능이 어떻게 동작해야 하는지 한글로 자세히 정의하고 

2. 그걸 코드로 번역만 하면

뭐든 직접 알아서 만들 수 있습니다. 




DB에 저장된 글들을 보여주는 기능 만들고 싶으면 어떻게 해야됩니까

1. html 페이지도 하나 필요하고 

2. 그 페이지 방문하면 DB에서 데이터를 꺼내와서 (없으면 임시로 몇개 만들고)

3. html 페이지에 꽂아넣어주면 되는거 아니겠습니까

이렇게 기능이 어떻게 동작하는지 한글로 상세히 적어두고 이거 그대로 자바스크립트 코드로 번역하면 끝입니다. 

상세히 기능정의를 해뒀다면 모르는거 검색도 매우 쉬워집니다. 

기능정의를 안해뒀다면 "게시판 만들기" 이런거 검색하고 이해안되는 200줄 짜리 코드 붙여넣기 하고 있었을텐데 

기능정의를 해뒀다면 "2. DB에서 데이터를 꺼내오는 법"을 정확히 검색할 수 있고 이해도 쉬워집니다. 

검색말고 GPT 같은거 써도 길게 물어보는 것 보다 짧게짧게 질문하는게 정확도가 뛰어납니다. 





1. html 페이지 만들기



글 목록을 보여줄 html 페이지 하나만 만들어봅시다.

예를 들어 /list로 접속하면 글 목록을 몇개 보여주도록 합시다. 


그래서 /list/page.jsx 파일 만들어서 이렇게 코드짰고

export default async function List() {
  return (
    <div className="list-bg">
      <div className="list-item">
        <h4>글제목</h4>
        <p>1월 1일</p>
      </div>
      <div className="list-item">
        <h4>글제목</h4>
        <p>1월 1일</p>
      </div>
      <div className="list-item">
        <h4>글제목</h4>
        <p>1월 1일</p>
      </div>
    </div>
  )
} 


global.css 에는 이렇게 코드 짜놨습니다.

.list-bg {
  background: rgb(249, 250, 255);
  padding: 10px;
}
.list-item {
  background: white;
  border-radius: 10px;
  padding: 20px;
  margin-bottom: 5px;
  box-shadow: rgb(224, 224, 224) 0px 2px 4px 0px;
}
.list-item h4 {
  font-size: 20px;
  font-weight: 800;
  margin: 0;
}
.list-item p {
  color: grey;
  margin : 5px 0px;
} 




2. MongoDB에 있는 데이터 출력하려면


이제 DB에 있는 데이터를 뽑아서 html 페이지에 보여줘봅시다.

하지만 지금 DB에 아무것도 없기 때문에 DB 들어가서 게시물 몇개만 하드코딩해놓읍시다. 

mongodb.com 들어가서 post 라는 이름의 collection 만들고 게시물 몇개만 집어넣어봅시다.



{
  title : '안녕',
  content : '반가워'
}

document 하나에 대충 이렇게 채워서 몇개 저장해놓으면 될듯요 




await db.collection('post').find().toArray() 
MongoDB에서 특정 컬렉션에 있는 모든 document를 가져오고 싶으면 위 처럼 작성하면 됩니다.

그럼 그 자리에 [ document1, document2 ... ] 형태의 자료로 남겨줍니다. 

document 들을 가져오면 { object } 자료형으로 되어있는데 진짠지 궁금하면 콘솔창에 출력해봅시다. 

다만 db 변수 사용시엔 저번시간에 정의해둔 connectDB() 라는 함수를 가져다가 쓰면 됩니다. 







3. html에 보여주기



html에 보여주고 싶으면 html 부분에 해당 데이터를 꽂아넣으면 될 뿐입니다. 

page.jsx 안에 적는 코드들은 기본적으로 서버측에서 먼저 실행되기 때문에

DB입출력같은거 해도 전혀 상관없습니다. 



import { connectDB } from "@/util/database.js"

export default async function List() {
  let db = (await connectDB).db('forum');
  let result = await db.collection('post').find().toArray();

  return (
    <div className="list-bg">
      <div className="list-item">
        <h4>{result[0].제목}</h4>
        <p>1월 1일</p>
      </div>
      <div className="list-item">
        <h4>글제목</h4>
        <p>1월 1일</p>
      </div>
      <div className="list-item">
        <h4>글제목</h4>
        <p>1월 1일</p>
      </div>
    </div>
  )
}

그래서 이렇게 쓰면 post collection 안에 있는 첫 게시물의 제목을 저기 넣어줄 수 있겠군요. 

result 변수를 출력해보면 [{}, {}, {}] 대충 이런 식으로 복잡하게 출력될텐데 

아무리 복잡하게 생긴 자료형도 시작 괄호만 잘 보면 출력가능합니다. 

시작이 [ 인 경우 array자료니까 [0] 이런 식으로 데이터꺼내면 됩니다. 

시작이 { 인 경우 object자료니까 .데이터이름 이런 식으로 데이터꺼내면 됩니다. 




Q. await이 뭐냐면 

자바스크립트에선 처리가 늦게되는 코드들이 간혹 존재합니다.

컴퓨터는 그런 코드들을 발견하면 제껴두고 바로 다음줄을 실행하려고 하는데

그게 싫으면 왼쪽에 await 붙이거나 오른쪽에 .then() 붙이거나 해서 써야합니다. 

아무데나 붙일 수 있는건 아니고 await 붙일 수 있는 것들이 정해져있습니다. (전문용어로 Promise 뱉는 곳에만 가능)

실은 mongodb 만든 사람이 mongodb관련 함수들 왼쪽엔 await 붙여쓰라고 하니까 붙이는 것일 뿐입니다. 






오늘의 숙제 :

DB에 게시물 3개 저장해둔 뒤에 html 페이지에 전부 보여줍시다.

반복적인 부분이 많으면 map 반복문 쓰는게 어떨까요. 